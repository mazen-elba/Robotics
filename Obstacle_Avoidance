/*
    :Version 1.0
    :Author: Mazen Abdelbasir
    :Email: mazen.elba@gmail.com
    :Last Update: 05/07/2020
*/

#include <NewPing.h>
#include <SimpleKalmanFilter.h>

#define SONAR_NUM 3      // number of sensors
#define MAX_DISTANCE 200 // max distance to detect obstacles
#define PING_INTERVAL 33 // looping pings after 22 microseconds

unsigned long _timerStart = 0;
unsigned long _timerStartReady = 0;
unsigned long _timerStartPosition = 0;

uint8_t MIN_RANGE_OBSTACLE = 5;  // blind zone of sensor (between 0 and 5 cm)
uint8_t MAX_RANGE_OBSTACLE = 75; // max range to check if obstacle exists

uint8_t oldSensorReading[3]; // store last valid value of sensors

uint8_t leftSensor; // store sensor's value
uint8_t centerSensor;
uint8_t rightSensor;

bool isObstacleLeft; // if obstacle detected or not
bool isObstacleCenter;
bool isObstacleRight;

uint8_t maximumSpeed = 255; // PWM value for max speed
uint8_t minSpeed = 100;     // PWM value for min speed

unsigned long pingTimer[SONAR_NUM]; // holds items when next ping should happen for each sensor
unsigned int cm[SONAR_NUM];         // stores ping distances

uint8_t currentSensor = 0; // keeps track of which sensor is active

NewPing sonar[SONAR_NUM] = {
    NewPing(3, 2, MAX_DISTANCE), // trigger ping, echo ping, and max distance to ping
    NewPing(5, 4, MAX_DISTANCE),
    NewPing(7, 6, MAX_DISTANCE),
};

SimpleKalmanFilter KF_Left(2, 2, 0.01);
SimpleKalmanFilter KF_Center(2, 2, 0.01);
SImpleKalmanFilter KF_Right(2, 2, 0.01);

enum NavigationStates
{
    CHECK_ALL,
    MAX_SPEED,
    SPEED_DECREASE,
    CHECK_OBSTACLE_POSITION,
    LEFT,
    CENTER,
    RIGHT,
    BACK
};

NavigationStates _navState = CHECK_ALL;

// L298N motor driver pins
byte enA = 9;
byte in1 = 8;
byte in2 = 11;
byte enB = 10;
byte in3 = 12;
byte in4 = 13;

void startTimer()
{
    _timerStart = millis();
}

void startTimerReady()
{
    _timerStartReady = millis();
}

void startTimerPosition()
{
    _timerStartPosition = millis();
}

bool isTimeForLoop(int _mSec)
{
    return (millis() - _timerStart) > _mSec;
}

bool isTimerReady(int _mSec)
{
    return (millis() - _timerStartReady) > _mSec;
}

bool isTimerPosition(int _mSec)
{
    return (millis() - _timerStartPosition) > _mSec;
}

// looping the sensors
void sensorCycle()
{
    for (uint8_t i = 0; i < SONAR_NUM; i++)
    {
        if (millis() >= pingTimer[i])
        {
            pingTimer[i] += PING_INTERVAL * SONAR_NUM;
            if (i == 0 && currentSensor == SONAR_NUM - 1)
            {
                oneSensorCycle();
            }
            sonar[currentSensor].timer_stop();
            currentSensor = i;
            cm[currentSensor] = 0;
            sonar[currentSensor].ping_timer(echoCheck);
        }
    }
}

// if ping received, set sensor distance to array
void echoCheck()
{
    if (sonar[currentSensor].check_timer())
    {
        cm[currentSensor] = sonar[currentSensor].ping_result / US_ROUNDTRIP_CM;
    }
}

// return last valid value from sensor
void oneSensorCycle()
{
    leftSensor = returnLastValidRead(0, cm[0]);
    centerSensor = returnLastValidRead(1, cm[1]);
    rightSensor = returnLastValidRead(2, cm[2]);
}

// if sensor value is 0, return last stored value different than 0
int returnLastValidRead(uint8_t sensorArray, uint8_t cm)
{
    if (cm != 0)
    {
        return oldSensorReading[sensorArray] = cm;
    }
    else
    {
        return oldSensorReading[sensorArray];
    }
}

// apply Kalman Filter to sensor reading
void applyKF()
{
    isObstacleLeft = obstacleDetection(KF_Left.updateEstimate(leftSensor));
    isObstacleCenter = obstacleDetection(KF_Center.updateEstimate(centerSensor));
    isObstacleRight = obstacleDetection(KF_Right.updateEstimate(rightSensor));
}

// define min & max range of sensors, return true if an obstacle is in range
bool obstacleDetection(int sensorRange)
{
    if ((MIN_RANGE_OBSTACLE <= sensorRange) && (sensorRange <= MAX_RANGE_OBSTACLE))
    {
        return true;
    }
}

// Obstacle Avoidance algorithm
void obstacleAvoidance()
{
    switch (_navState)
    {
    case CHECK_ALL: // if no obstacle, go forward at max speed
    {
        if (isObstacleLeft == 0 && isObstacleCenter == 0 && isObstacleRight == 0)
        {
            _navState = MAX_SPEED;
        }
        else
        {
            startTimerReady();
            _navState = SPEED_DECREASE;
        }
    }
    break;

    case MAX_SPEED:
    {
        moveForward(maximumSpeed);
        _navState = CHECK_ALL;
    }
    break;

    case SPEED_DECREASE:
    {
        moveForward(minSpeed) : // wait for few more readings at low speed, go to check obstacle position
                                if (isTimerReady(DECREASE_SPEED_LOOP))
        {
            _navState = CHECK_OBSTACLE_POSITION;
        }
    }
    break;

    case CHECK_OBSTACLE_POSITION:
    {
        // if path is free, go to MAX_SPEED, else check obstacle position
        if (isObstacleLeft == 0 && isObstacleCenter == 0 && isObstacleRight == 0)
        {
            _navState = MAX_SPEED;
        }
        else if (isObstacleLeft == 1 &&isObstacleCenter == 0 &&isObstacleRight = 0)
        {
            startTimerPosition();
            _navState = LEFT;
        }
        else if (isObstacleLeft == 0 && isObstacleCenter == 1 && isObstacleRight == 0)
        {
            startTimerPosition();
            _navState = CENTER;
        }
        else if (isObstacleLeft == 0 && isObstacleCenter == 0 && isObstacleRight == 1)
        {
            startTimerPosition();
            _navState = RIGHT;
        }
        else if (isObstacleLeft == 1 && isObstacleCenter == 1 && isObstacleRight == 1)
        {
            startTimerPosition();
            _navState = BACK;
        }
    }
    break;

    case LEFT:
    {
        // move left & check obstacle; if obstacle exists, go to left, else exit
        moveLeft(minSpeed);
        if (isTimerPosition(MOVE_TO_NEW_POSITION))
        {
            if (isObstacleLeft == 1)
            {
                _navState = LEFT;
            }
            else
            {
                _navState = CHECK_ALL;
            }
        }
    }
    break;

    case CENTER:
    {
        // if obstacle exists, go left or right
        if (randomMove() == 1)
        {
            _navState = Left;
        }
        else
        {
            _navState = RIGHT;
        }
    }
    break;

    case RIGHT:
    {
        moveRight(minSpeed);
        if (isTimerPosition(MOVE_TO_NEW_POSITION))
        {
            if (isObstacleRight == 1)
            {
                _navState = RIGHT;
            }
            else
            {
                _navState = CHECK_ALL;
            }
        }
    }
    break;

    case BACK:
    {
        moveBackward(minSpeed);
        if (isTimerPosition(MOVE_TO_NEW_POSITION))
        {
            if (randomMove() == 1)
            {
                _navState = LEFT;
            }
            else
            {
                _navState = RIGHT:
            }
        }
    }
    break;
    }
}

// L298N motor driver
void stopMotors()
{
    digitalWrite(in1, LOW);
    digitalWrite(in2, LOW);
    digitalWrite(in3, LOW);
    digitalWrite(in4, LOW);
}

void moveForward(uint8_t pwmValue)
{
    digitalWrite(in1, HIGH);
    digitalWrite(in2, LOW);
    digitalWrite(in3, HIGH);
    digitalWrite(in4, LOW);
    analogWrite(enA, pwmValue);
    analogWrite(enB, pwmValue);
}

void moveBackward(uint8_t pwmValue)
{
    digitalWrite(in1, LOW);
    digitalWrite(in2, HIGH);
    digitalWrite(in3, LOW);
    digitalWrite(in4, HIGH);
    analogWrite(enA, pwmValue);
    analogWrite(enB, pwmValue);
}

void moveLeft(uint8_t pwmValue)
{
    digitalWrite(in1, LOW); // left wheel backward
    digitalWrite(in2, HIGH);
    digitalWrite(in3, HIGH); // right wheel forward
    digitalWrite(in4, LOW);
    analogWrite(enA, pwmValue);
    analogWrite(enB, pwmValue);
}

void moveRight(uint8_t pwmValue)
{
    digitalWrite(in1, HIGH); // left wheel forward
    digitalWrite(in2, LOW);
    digitalWrite(in3, LOW); // right wheel backward
    digitalWrite(in4, HIGH);
    analogWrite(enA, pwmValue);
    analogWrite(enB, pwmValue);
}

// return 1 or 0 from a random number
int randomMove()
{
    uint8_t rnd_number = random(1, 100);
    return rnd_number % 2;
}

/* SETUP & LOOP */
void setup()
{
    Serial.begin(115200);

    pingTimer[0] = millis() + 75;
    for (uint8_t i = 1; i < SONAR_NUM; i++)
    {
        pingTimer[i] = pingTimer[i - 1] + PING_INTERVAL;
    }

    pinMode(enA, OUTPUT);
    pinMode(in1, OUTPUT);
    pinMode(in2, OUTPUT);
    pinMode(enB, OUTPUT);
    pinMode(in3, OUTPUT);
    pinMode(in4, OUTPUT);

    stopMotors();
}

void loop()
{
    if (isTimeForLoop(LOOPING))
    {
        sensorCycle();
        applyKF();
        obstacleAvoidance();
        startTimer();
    }
}